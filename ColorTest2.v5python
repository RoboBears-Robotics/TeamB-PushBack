{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\nimport math\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Vision Color Descriptions\nai_vision_21__RedBlock = Colordesc(1, 195, 74, 119, 13, 0.91)\nai_vision_21__BlueBlock = Colordesc(2, 41, 100, 159, 8, 0.27)\n# AI Vision Code Descriptions\nai_vision_21 = AiVision(Ports.PORT21, ai_vision_21__RedBlock, ai_vision_21__BlueBlock)\nFrontLandM = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nTopMotors = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nBackMiddle = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nBackLower = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nai_vision_1_objects = []\nscreen_precision = 0\nconsole_precision = 0\nmyVariable = 0\n\nbuttonXActive = False\nbuttonBActive = False\nbuttonUpActive = False\nbuttonLRActive = False\nbuttonDownActive = False\n\ndef buttonBFunct():\n    BackMiddle.stop()\n    TopMotors.stop()\n    FrontLandM.stop()\n    BackLower.stop()\n    buttonDownActive = False\n    global buttonBActive\n    if not buttonBActive:\n        FrontLandM.spin(FORWARD)\n        BackLower.spin(REVERSE)\n        buttonBActive = True\n    else:\n        buttonBActive = False\n\ndef buttonXFunct():\n    BackMiddle.stop()\n    TopMotors.stop()\n    FrontLandM.stop()\n    BackLower.stop()\n    global buttonXActive\n    if not buttonXActive:\n        FrontLandM.spin(FORWARD)\n        BackLower.spin(FORWARD)\n        BackMiddle.spin(REVERSE)\n        buttonXActive = True\n    else:\n        buttonXActive = False\n\ndef buttonUpFunct():\n    BackMiddle.stop()\n    TopMotors.stop()\n    FrontLandM.stop()\n    BackLower.stop()\n    global buttonUpActive\n    if not buttonUpActive:\n        FrontLandM.spin(FORWARD)\n        BackLower.spin(REVERSE)\n        TopMotors.spin(FORWARD)\n        BackMiddle.spin(FORWARD)\n        buttonUpActive = True\n    else:\n        buttonUpActive = False\n\ndef buttonLRFunct():\n    BackMiddle.stop()\n    TopMotors.stop()\n    FrontLandM.stop()\n    BackLower.stop()\n    global buttonLRActive\n    if not buttonLRActive:\n        FrontLandM.spin(FORWARD)\n        BackLower.spin(REVERSE)\n        BackMiddle.spin(FORWARD)\n        TopMotors.spin(REVERSE)\n        buttonLRActive = True\n    else:\n        buttonLRActive = False\n\ndef buttonDownFunct():\n    BackMiddle.stop()\n    TopMotors.stop()\n    FrontLandM.stop()\n    BackLower.stop()\n    global buttonDownActive\n    if not buttonDownActive:\n        FrontLandM.spin(REVERSE)\n        BackMiddle.spin(FORWARD)\n        BackLower.spin(REVERSE)\n        buttonDownActive = True\n    else:\n        buttonDownActive = False\n\ncontroller_1.buttonX.pressed(buttonXFunct)\ncontroller_1.buttonB.pressed(buttonBFunct)\ncontroller_1.buttonUp.pressed(buttonUpFunct)\ncontroller_1.buttonLeft.pressed(buttonLRFunct)\ncontroller_1.buttonRight.pressed(buttonLRFunct)\ncontroller_1.buttonDown.pressed(buttonDownFunct)\n\ndef checkBlue():\n    global myVariable, ai_vision_1_objects, screen_precision, console_precision\n    brain.screen.set_font(FontType.MONO40)\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.set_cursor(1, 1)\n    ai_vision_1_objects = ai_vision_21.take_snapshot(ai_vision_21__BlueBlock)\n    if ai_vision_1_objects and len(ai_vision_1_objects) > 0:\n        brain.screen.print(\"Blue Object Found\")\n    else:\n        brain.screen.print(\"No Blue Object\")\n\ndef checkRed():\n    global myVariable, ai_vision_1_objects, screen_precision, console_precision\n    brain.screen.set_font(FontType.MONO40)\n    brain.screen.clear_row(3)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.set_cursor(3, 1)\n    ai_vision_1_objects = ai_vision_21.take_snapshot(ai_vision_21__RedBlock)\n    if ai_vision_1_objects and len(ai_vision_1_objects) > 0:\n        brain.screen.print(\"Red Object Found\")\n    else:\n        brain.screen.print(\"No Red Object\")\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\ndef user_control():\n    # global myVariable, ai_vision_1_objects, screen_precision, console_precision\n    # while True:\n        # checkBlue()\n        # checkRed()\n        # wait(0.1, SECONDS)\n        # wait(20, MSEC)\n    pass\n    \ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","robotConfig":[{"port":[21],"name":"ai_vision_21","customName":false,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[{\"id\":1,\"name\":\"RedBlock\",\"nameValid\":\"Valid\",\"lastValidName\":\"RedBlock\",\"red\":195.33214433416046,\"green\":74.49502860490763,\"blue\":118.85193513923353,\"hueRange\":13,\"saturationRange\":0.91},{\"id\":2,\"name\":\"BlueBlock\",\"nameValid\":\"Valid\",\"lastValidName\":\"BlueBlock\",\"red\":41.099903969270166,\"green\":100.36658130601792,\"blue\":159.33114596670936,\"hueRange\":8,\"saturationRange\":0.27}],\"codes\":[],\"AIObjects\":false,\"AIModelMetadata\":{\"id\":0,\"version\":1,\"name\":\"Classroom Objects\"},\"aiModelDropDownValue\":0}","isConfigured":"false"},"triportSourcePort":22},{"port":[11],"name":"FrontLandM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"TopMotors","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"BackMiddle","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"BackLower","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.62.0","minVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null},"target":"Physical"}